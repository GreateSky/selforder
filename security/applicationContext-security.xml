<?xml version="1.0" encoding="UTF-8"?>  
<beans:beans xmlns="http://www.springframework.org/schema/security"  
	  xmlns:beans="http://www.springframework.org/schema/beans"  
	  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
	  xsi:schemaLocation="http://www.springframework.org/schema/beans  
	       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
	       http://www.springframework.org/schema/security  
	       http://www.springframework.org/schema/security/spring-security-3.1.xsd">  
      
     <!--不拦截 -->  
	 <http pattern="/login.jsp" security="none" />  
     <http pattern="/assets/**" security="none" /> 
     <http pattern="/js/**" security="none" />
     <http pattern="/css/**" security="none" />
     <http pattern="/api/weixin/**" security="none" />
             
   	 <!--设置拦截-->  
	 <http auto-config='true' access-denied-page="/403.jsp">  
	   <!-- 设置用户默认登录页面 -->  
	   <form-login 
	   		login-page="/login.jsp" 
	   		authentication-failure-url ="/login.jsp?error=-1" 
	   		default-target-url ="/index.jsp"
	   	/>  
	   <logout logout-success-url ="/login.jsp" invalidate-session="true"/>
	   <!--  增加一个filter，这点与Acegi是不一样的，不能修改默认的filter了，这个filter位于FILTER_SECURITY_INTERCEPTOR之前  -->
	   <custom-filter  before ="FILTER_SECURITY_INTERCEPTOR"  ref ="myFilter"/> 
	 </http>  
	 <!--  一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性，
     	我们的所有控制将在这三个类中实现，解释详见具体配置  --> 
     <beans:bean  id ="myFilter"  class ="com.selforder.security.context.MySecurityFilter" > 
          <beans:property  name ="authenticationManager"  ref ="authenticationManager"   /> 
          <beans:property  name ="accessDecisionManager"  ref ="myAccessDecisionManagerBean"   /> 
          <beans:property  name ="securityMetadataSource" ref ="securityMetadataSource"   /> 
      </beans:bean > 	
      
    <!--  认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可  -->   
	<authentication-manager alias ="authenticationManager">
  		<!-- 权限控制 引用 id是myUserDetailsService的server -->
  		<authentication-provider user-service-ref="myUserDetailsService">
  			<!--密码采用md5加密 并将username作为盐值   加密的方式为MD5:password{username}-->
  			<password-encoder hash="md5">
		     	 <salt-source user-property="username"/>
		     </password-encoder>
  		</authentication-provider>
  	</authentication-manager>
  	
  	<beans:bean name="myUserDetailsService" class="com.selforder.security.context.MyUserDetailsService">
  		<beans:property  name ="employeeDao"  ref ="employeeDao"   /> 
  		<beans:property  name ="employeeService"  ref ="employeeService"   /> 
  	</beans:bean>
  	<!--  访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源  --> 
    <beans:bean  id ="myAccessDecisionManagerBean" class ="com.selforder.security.context.MyAccessDecisionManager"></beans:bean >
    <!--  资源源数据定义，即定义某一资源可以被哪些角色访问  --> 
    <beans:bean  id ="securityMetadataSource" class ="com.selforder.security.context.MyInvocationSecurityMetadataSource" >
    	<beans:constructor-arg name="powerDao" ref="powerDao"></beans:constructor-arg> 
    </beans:bean>  
</beans:beans>             